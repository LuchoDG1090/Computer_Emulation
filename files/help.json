{
    "ADD": {
        "Info": "Suma los valores de dos registros y guarda el resultado en otro registro",
        "Example": "ADD RD,R1,R2",
        "Opcode": "0x10",
        "Type": "R-type",
        "Params": ["RD", "R1", "R2"]
    },
    "SUB" : {
        "Info": "Resta los valores de dos registros y guarda el resultado en otro registro",
        "Example": "SUB RD,R1,R2",
        "Opcode": "0x11",
        "Type": "R-type",
        "Params": ["RD", "R1", "R2"]
    },
    "MUL" : {
        "Info": "Multiplica los valores de dos registros y guarda la parte baja del producto en un registro destino",
        "Example": "MUL RD,R1,R2",
        "Opcode": "0x12",
        "Type": "R-type",
        "Params": ["R1", "R2", "RD"]
    }, 
    "DIV" : {
        "Info": "Desarrolla la división de dos registros y guarda el resultado en un registro destino",
        "Example": "DIV RD,R1,R2",
        "Opcode": "0x13",
        "Type": "R-type",
        "Params": ["RD", "R1", "R2"]
    },
    "AND" : {
        "Info": "Realiza la operación AND bit a bit entre dos registros y guarda el resultado en un registro destino",
        "Example": "AND RD,R1,R2",
        "Opcode": "0x14",
        "Type": "R-type",
        "Params": ["RD", "R1", "R2"]
    },
    "OR" : {
        "Info": "Realiza la operación OR bit a bit entre dos registros y guarda el resultado en un registro destino",
        "Example": "OR RD,R1,R2",
        "Opcode": "0x15",
        "Type": "R-type",
        "Params": ["RD", "R1", "R2"]
    },
    "XOR" : {
        "Info": "Realiza la operación XOR bit a bit entre dos registros y guarda el resultado en un registro destino",
        "Example": "XOR RD,R1,R2",
        "Opcode": "0x16",
        "Type": "R-type",
        "Params": ["RD", "R1", "R2"]
    },
    "NOT" : {
        "Info": "Realiza la operación NOT bit a bit entre dos registros y guarda el resultado en un registro destino",
        "Example": "NOT RD,R1,R2",
        "Opcode": "0x17",
        "Type": "R-type",
        "Params": ["RD", "R1", "R2"]
    },
    "SHL" : {
        "Info": "Desplaza lógicamente a la izquierda un shift amount de bits (SHIFT/SHAMT) el valor en un registro",
        "Example": "SHL RD,SHIFT",
        "Opcode": "0x18",
        "Type": "R-type",
        "Params": ["RD","SHIFT"]
    },
    "SHR" : {
        "Info": "Desplaza lógicamente a la derecha a un shift amount de bits (SHIFT/SHAMT) el valor en un registro",
        "Example": "SHR RD,SHIFT",
        "Opcode": "0x19",
        "Type": "R-type",
        "Params": ["RD","SHIFT"]
    },
    "SAR" : {
        "Info": "Desplaza aritméticamente a la derecha un valor dado preservando el signo",
        "Example": "SAR RD,SHIFT",
        "Opcode": "0x1A",
        "Type": "R-type",
        "Params": ["RD","SHIFT"]
    },
    "ADDI": {
        "Info": "Suma un inmediato al valor de un regsirto y guarda en un registro de destino",
        "Example": "SUBI RD,R1,IMM32",
        "Opcode": "0x20",
        "Type": "I-type",
        "Params": ["RD", "R1", "IMM32"]
    },
    "SUBI" : {
        "Info": "Resta un inmediato al valor de un registro y guarda en un registro de destino",
        "Example": "SUBI RD,R1,IMM32",
        "Opcode": "0x21",
        "Type": "I-type",
        "Params": ["RD", "R1", "IMM32"]
    },
    "MOVI" : {
        "Info": "Carga un inmediato de 32 bits (Sign-extended) en el registro destino",
        "Example": "MOVI, RD, IMM32",
        "Opcode": "0x22",
        "Type": "I-type",
        "Params": ["RD", "IMM32"]
    },
    "LD" : {
        "Info": "Carga una palabra de 64 bits desde memoria en el registro destino (usando base + offset)",
        "Example": "LD RD, [RS1 + IMM32]",
        "Opcode": "0x23",
        "Type": "I-type",
        "Params": ["RD", "IMM32", "RS1"]
    },
    "ST" : {
        "Info": "Almacena la palabra de 64 bits del registro fuente en memoria con la dirección base + offset",
        "Example": "ST RS2, [RS1 + IMM32]",
        "Opcode": "0x24",
        "Type": "I-type",
        "Params": ["RS1", "IMM32", "RS2"]
    },
    "LDB" : {
        "Info": "Carga un byte desde memoria, lo extiende y lo escribe en RD",
        "Example": "LDB RD, [RS1 + IMM32]",
        "Opcode": "0x25",
        "Type": "I-type",
        "Params": ["RD", "IMM32", "RS1"]
    },
    "STB" : {
        "Info": "Almacena el byte menos significativo del registro fuente en la dirección indicada",
        "Example": "STB RS2, [RS1 + IMM32]",
        "Opcode": "0x26",
        "Type": "I-type",
        "Params": ["RS2", "RS1", "IMM32"]
    },
    "LDABS" : {
        "Info": "Carga una palabra de 64 bits desde la dirección absoluta especificada por IMM32",
        "Example": "LDABS RD, [IMM32]",
        "Opcode": "0x27",
        "Type": "I-type",
        "Params": ["RD", "IMM32"]
    },
    "STABS" : {
        "Info": "Escribe una palabra de 64 bits desde el registro indicado en una dirección de memoria absoluta",
        "Example": "STABS RS1, [IMM32]",
        "Opcode": "0x28",
        "Type": "I-type",
        "Params": ["RS1", "IMM32"]
    },
    "CMP" : {
        "Info": "Compara dos registros actualizando las banderas sin escribir los resultados en un registro.",
        "Example": "CMP RS1, RS2",
        "Opcode": "0x30",
        "Type": "A-type",
        "Params": ["RS1", "RS2"]
    },
    "CMPI" : {
        "Info": "Compara un registro con un inmediato y actualiza las banderas",
        "Example": "CMPI RS1, IMM32",
        "Opcode": "0x31",
        "Type": "I-type",
        "Params": ["RS1", "IMM32"]
    },
    "TEST" : {
        "Info": "Realiza la operación AND entre dos registros para probar bits y actualiza Z/M sin modificar registros",
        "Example": "TEST RS1, RS2",
        "Opcode": "0x32",
        "Type": "R-type",
        "Params": ["RS1", "RS2"]
    },
    "RDFLAGS" : {
        "Info": "Copia el contenido del registro de banderas al registro destino en formato entero",
        "Example": "RDFLAGS RD",
        "Opcode": "0x33",
        "Type": "I-type",
        "Params": ["RD"]
    },
    "WRFLAGS" : {
        "Info": "Escribe el registro de banderas con los bits ofrecidos en RS (Operación privilegiada)",
        "Example": "WRFLAGS RS",
        "Opcode": "0x34",
        "Type": "I-type",
        "Params": ["RS"]
    },
    "JMP" : {
        "Info": "Cambia el contador de programa a la dirección absoluta por IMM32",
        "Example": "JMP IMM32",
        "Opcode": "0x40",
        "Type": "J-type",
        "Params": ["IMM32"]
    },
    "JZ" : {
        "Info": "Si la bandera zero está activa, salta a la dirección indicada de lo contrario continua",
        "Example": "JZ IMM32",
        "Opcode": "0x41",
        "Type": "J-type",
        "Params": ["IMM32"]
    },
    "JNZ" : {
        "Info": "Salta a la dirección indicada si zero está desactivada",
        "Example": "JNZ IMM32",
        "Opcode": "0x42",
        "Type": "J-type",
        "Params": ["IMM32"]
    },
    "JC" : {
        "Info": "Salta a la dirección indicada si la bandera carry está activada",
        "Example": "JC IMM32",
        "Opcode": "0x43",
        "Type": "J-type",
        "Params": []
    },
    "JNC": {
        "Info": "Salta si la bandera carry está desactivada",
        "Example": "JNC IMM32",
        "Opcode": "0x44",
        "Type": "J-type",
        "Params": ["IMM32"]
    },
    "JS": {
        "Info": "Salta si la bandera negativa indica que la operación aritmético lógica arrojó un número negativo",
        "Example": "JS IMM32",
        "Opcode": "0x45",
        "Type": "J-type",
        "Params": ["IMM32"]
    },
    "CALL": {
        "Info": "Guarda la dirección de retorno en R14 y salta a la subrutina indicada",
        "Example": "CALL IMM32",
        "Opcode": "0x46",
        "Type": "J-type",
        "Params": ["IMM32"]
    },
    "RET": {
        "Info": "Retorno de subrutina cargando el contador del programa desde R14",
        "Example": "RET",
        "Opcode": "0x47",
        "Type": "S-type",
        "Params": []
    },
    "BR": {
        "Info": "Realiza salto indirecto utilizando la dirección almacenada en un registro",
        "Example": "BR RS1",
        "Opcode": "0x48",
        "Type": "R-type",
        "Params": ["RS1"]
    },
    "PUSH": {
        "Info": "Decrementa el puntero de pila y salva la palabra de 64bits del registro en memoria",
        "Example": "PUSH RS1",
        "Opcode": "0x50",
        "Type": "S-type",
        "Params": ["RS1"]
    },
    "POP": {
        "Info": "Recupera la palabra superior de la pila en el registro destino y ajusta el puntero de la pila",
        "Example": "POP RD",
        "Opcode": "0x51",
        "Type": "S-type",
        "Params": ["RD"]
    },
    "ENTER": {
        "Info": "Reserva en la pila un marco de tamaño IMM32 y decremento del SP",
        "Example": "ENTER IMM32",
        "Opcode": "0x52",
        "Type": "S-type",
        "Params": ["IMM32"]
    },
    "LEAVE": {
        "Info": "Libera el marco de pila sumando IMM332 al puntero de la pila",
        "Example": "LEAVE IMM32",
        "Opcode": "0x53",
        "Type": "S-type",
        "Params": ["IMM32"]
    },
    "IN": {
        "Info": "Lee desde una dirección MMIO o puerto y coloca el dato en el registro de destino",
        "Example": "In RD, IMM32",
        "Opcode": "0x60",
        "Type": "I-type",
        "Params": ["RD", "IMM32"]
    },
    "OUT": {
        "Info": "Escribe el valor del registro en una dirección MMIO o puerto",
        "Example": "OUT RS1, IMM32",
        "Opcode": "0x61",
        "Type": "I-type",
        "Params": ["RS1", "IMM32"]
    },
    "TRAP": {
        "Info": "Invoca un servicio de sistema o excepción software pasando el número de servicio",
        "Example": "TRAP IMM8",
        "Opcode": "0x62",
        "Type": "I-type/S-type",
        "Params": ["IMM8"]
    },
    "INT_ENABLE": {
        "Info": "Habilita el procesamientode interrupciones alterando el flag register",
        "Example": "INT_ENABLE",
        "Opcode": "0x63",
        "Type": "S-type",
        "Params": []
    },
    "INT_DISABLE": {
        "Info": "Deshabilita las interrupciones al alterar el flag register",
        "Example": "INT_DISABLE",
        "Opcode": "0x64",
        "Type": "S-type",
        "Params": []
    },
    "IRET": {
        "Info": "Finaliza el servicio de manejo de interrupciones regresando el contexto (flags y program counter) desde pila",
        "Example": "IRET",
        "Opcode": "0x65",
        "Type": "S-type",
        "Params": []
    },
    "NOP": {
        "Info": "No reliza operación y avanza a la siguiente instrucción al leer el contador de programa",
        "Example": "NOP",
        "Opcode": "0x70",
        "Type": "S-type",
        "Params": []
    },
    "HALT": {
        "Info": "Detiene la ejecución del procesador hasta reinicio o intervención externa",
        "Example": "HALT",
        "Opcode": "0x71",
        "Type": "S-type",
        "Params": []
    },
    "CACHEFLUSH": {
        "Info": "Vacía completamente el contenido de la memoria caché escribiendo de vuelta a memoria principal tosas las lineas modificadas",
        "Example": "CACHEFLUSH",
        "Opcode": "0x72",
        "Type": "S-type",
        "Params": []
    },
    "MEMBARRIER": {
        "Info": "Garantiza el orden de las operaciones de memoria",
        "Example": "MEMBARRIER",
        "Opcode": "0x73",
        "Type": "S-type",
        "Params": []
    },
    "CRC": {
        "Info": "Calcula el CRC sobre un cloque de parametros y lo almacena en un registro destnino indicado",
        "Example": "CRC RD, RS1, RS2",
        "Opcode": "0x90",
        "Type": "R-type",
        "Params": ["RD", "RS1", "RS2"]
    }
}